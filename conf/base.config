// basic information about the workflow
manifest {
  name = 'cubseq-nf'
  description = 'Comprehensive transcriptome-wide meta-analysis of codon usage using RNA-sequencing.'
  version = '0.9'
  homePage = 'https://github.com/stracquadaniolab/cubseq-nf.git'
  author = 'Anima Sutradhar & Giovanni Stracquadanio'
  nextflowVersion = '>=20.07.1'
}

// default configuration
executor {
	name = 'local'
	cpus   = 4
	memory = 8.GB
  queueSize = 50
}

process {

	executor = 'local'
	cpus = 4
	memory = 8.GB
	shell = ['/bin/bash', '-euo', 'pipefail']

  withName: GET_READS {
    errorStrategy = { task.exitStatus in [18, 56, 28] ? 'retry' : 'ignore' }
    maxRetries = 15
  }

  withName: ALIGN_READS {
    memory = { task.attempt > 1 ? 32.GB : 4.GB }
    errorStrategy = { task.exitStatus in [102, 137, 138, 139, 140] ? 'retry' : 'ignore' }
    maxRetries = 2
  }

  withName: FREEBAYES_CALL_VARIANTS {
    memory = { 8.GB * task.attempt }
    errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'ignore' }
    maxRetries = 4
  }

  withName: SALMON_QUANT {
    errorStrategy = { task.exitStatus == 1 ? 'retry' : 'ignore' }
    maxRetries = 1
  }
  
  withName: STRAIN_CU_CAT_PLOT {
    errorStrategy = 'ignore'
  }
  
}

// Export this variable to prevent local Python libraries
// from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
}

// profiles to setup runtimes, executors, and process resources
profiles {

  docker {
    docker.enabled         = true
    docker.userEmulation   = true
    singularity.enabled    = false
    podman.enabled         = false
    shifter.enabled        = false
    charliecloud.enabled   = false

    process.container = "ghcr.io/stracquadaniolab/cubseq-nf:v1.0.4"
  }

  singularity {
    singularity.enabled    = true
    singularity.autoMounts = true
    docker.enabled         = false
    podman.enabled         = false
    shifter.enabled        = false
    charliecloud.enabled   = false

    process.container = "docker://ghcr.io/stracquadaniolab/cubseq-nf:v1.0.4"
  }

  slurm {
    process.executor='slurm'
    process.queue='compute'
  }

  apple {
    docker.runOptions = '--platform linux/amd64'
  }

  ci {
    executor.name = 'local'
    executor.cpus   = 2
    executor.memory = 8.GB
    executor.queueSize = 5

    process.executor = 'local'
    process.cpus = 1
    process.memory = 2.GB
    process.shell = ['/bin/bash', '-euo', 'pipefail']
  }

  // profile containing dummy data to test the workflow
  test {
    params {
      // general params
      resultsDir = "./results/"

      // GET_METADATA parameters
      taxonId = "562"
      limitSearch = "0"
      removeRun = '""'
      max_sra_bytes = "55000000000"
      // dateMin = "2017-05-01"
      // dateMax = "2017-05-31"

      // Genome files
      genome.reference = "${baseDir}/testdata/genome/Escherichia_coli_str_k_12_substr_mg1655_gca_000005845.ASM584v2.dna.chromosome.Chromosome.fa"
      genome.annotation = "${baseDir}/testdata/genome/Escherichia_coli_str_k_12_substr_mg1655_gca_000005845.ASM584v2.53.gtf"

      // STAR parameters
      star.sjdbOverhang = "100"
      star.genomeSAindexNbases = "10"
      star.alignIntronMax = "1"

      // featureCounts parameters
      featureCounts.type.feature = "exon"
      featureCounts.type.attribute = "gene_id"

      // freebayes parameters
      freebayes.ploidy = "1"

      // SALMON_INDEX parameters
      salmon.index.args = ""

      // SALMON_QUANT parameters
      salmon.quant.libtype = 'A'
      salmon.quant.args = ""

      // SUMMARIZE_TO_GENE parameters
      summarize_to_gene.metadata = "testdata/test-data/metadata/metadata.csv"
      summarize_to_gene.quant.dir = "testdata/test-data/salmon-quant"
      summarize_to_gene.counts_from_abundance = "no"
      summarize_to_gene.output = "txi-summarized-experiment.rds"

      // GET_HEG_LEG parameters
      get_heg_leg.proportion = 0.1
      get_heg_leg.permutations = 500
      get_heg_leg.output.heg = "heg-TrID.csv"
      get_heg_leg.output.leg = "leg-TrID.csv"

      // GET_HEG_LEG_FASTA parameters
      get_heg_leg_fasta.metadata = "testdata/get-heg-leg-fasta/metadata/metadata_test.csv"
      mut_fasta = "testdata/test-data/mut-transcriptome"
      get_heg_leg_fasta.heg = "testdata/get-heg-leg-fasta/fisher-transform-analysis/heg-scores.csv"
      get_heg_leg_fasta.leg = "testdata/get-heg-leg-fasta/fisher-transform-analysis/leg-scores.csv"

      // RANK_GENES parameters
      txi = "testdata/rank-genes-test/dataset/txi-summarized-experiment.rds"
      rank_genes.metadata = "testdata/rank-genes-test/metadata/norm_metadata.csv"
      rank_genes.fdr = "0.01"

      // GET_CU_FREQUENCIES parameters
      get_cu_frequencies.heg_fasta_dir = "testdata/test-data/heg-mut-transcriptome"
      get_cu_frequencies.leg_fasta_dir = "testdata/test-data/leg-mut-transcriptome"
      get_cu_frequencies.protein_fasta_dir = "results/protein-mut-transcriptome"
      get_cu_frequencies.tax_id = "83333"
      get_cu_frequencies.cocoputs_counts = "testdata/get-cu-frequencies/cocoputs-83333-codon-counts.csv"

      // GET_CU_FIGURES parameters
      get_cu_figures.aa_property_table = "testdata/figure-data/aa-properties.csv"
      get_cu_figures.rf = "results/final-data/get-cu/dataset/all-kazusa-83333-rf.csv"

      // CORDON_CODON_USAGE_ANALYSIS
      coRdon.cub_statistic = "MILC"
      coRdon.len_threshold = "80"

      // metadata
      //metadata = "testdata/test-data/metadata/metadata-delim.csv"
      metadata = "testdata/vcfr-test/metadata-delim.csv"

      // STRAIN_ANALYSIS parameters
      strain.test.metadata = "testdata/test-data/metadata/metadata.csv"
      strain.test.quant_dir = "testdata/test-data/salmon-quant"
      strain.test.heg_fasta_dir = "testdata/test-data/heg-mut-transcriptome"

      // RANK_PRODUCT parameters
      compute_rank_product.txi = "testdata/test-data/dataset/txi-summarized-experiment.rds"
      compute_rank_product.permutations = "5"
      compute_rank_product.fdr_threshold = "0.05"

      // GET_PCA parameters
      get_pca.txi = "results/data/dataset/txi-summarized-experiment.rds"
      get_pca.metadata = "results/data/metadata/norm_metadata.csv"
      
      // VARIANT_ANALYSIS parameters
      vcf_dir = "testdata/test-data/filtered-vcf"
      gff = "testdata/genome/Escherichia_coli_str_k_12_substr_mg1655_gca_000005845.ASM584v2.55.chromosome.Chromosome.gff3.gz"

      // MERGE_VCF parameters
      //vcf = "testdata/test-data/filtered-vcf"
      //merge_vcf.vcf_dir = "testdata/test-data/filtered-vcf/*.vcf.gz"
      merge_vcf.vcf_dir = "testdata/vcfr-test/vcf-test/*.vcf.gz"
      vcf = "testdata/vcfr-test/vcf-test"

      // VCFR_QC parameters
      vcfr_qc.merged_vcf = "results/merged-vcf/merged.vcf"

      // GET_VCF_STATS parameters
      get_vcf_stats.merged_vcf = "testdata/vcfr-test/merged-vcf/merged.vcf"

      // BCFTOOLS_VIEW parameters
      bcftools_view.merged_vcf = "test.vcf"

      // PLOT_VCF_STATS parameters
      plot_vcf_stats.main_title = "'Escherichia coli merged samples'"
      
      // PLOT_VCF parameters
      plot_vcf.merged_vcf = "testdata/merged-vcf/subset-merged-vcf.vcf"

      // STRAIN_CU_HEATMAP
      strain_cu_heatmap.metadata = "testdata/test-data/metadata/metadata.csv"
      strain_cu_heatmap.fasta = "testdata/test-data/heg-mut-transcriptome"
      strain_cu_heatmap.width = "15"
      strain_cu_heatmap.height = "15"

      // ANNOTATE_VCF parameters
      annotate_vcf.dir = "results/mut-gene-count"

      // GET_STRAIN_CAT_PLOT parameters
      get_strain_cat_plot.tax_names = "testdata/cat-analysis/ncbi-ecoli-taxdump.csv"
      get_strain_cat_plot.heg_scores = "testdata/cat-analysis/heg-scores.csv"
      get_strain_cat_plot.leg_scores =  "testdata/cat-analysis/leg-scores.csv"
      get_strain_cat_plot.num_strains = "10"
      get_strain_cat_plot.fdr = "0.01"

      // SUMMARISE_CODON_COUNTS parameters
      summarise_cc.codon_counts_csv = "testdata/codon-counts/protein-cc-subset.csv"

      // tRNA analysis parameters
      featurecounts_metadata = "testdata/featurecounts-tximport-test/metadata/metadata.csv"
      featurecounts_dir = "testdata/featurecounts-tximport-test/featureCounts"
      summarize_to_gene_featurecounts.counts_from_abundance = "no"
      featurecounts_tpm_dir = "testdata/featurecounts-tximport-test/featureCounts-tpm"

    }
  }

}

// configuring log information
report {
  enabled = true
  file = "logs/execution_report.html"
}
